Question: Given the root of a binary tree, determine if it is a valid binary search tree (BST).
          A valid BST is defined as follows:
          1. The left subtree of a node contains only nodes with keys less than the node's key.
          2. The right subtree of a node contains only nodes with keys greater than the node's key.
          3. Both the left and right subtrees must also be binary search trees.
Thoughts: Iterate and keep min and max number. 
Note: int can't be null but Interger can! The int type in Java can be used to represent any whole number from -2147483648 to 2147483647.
Solution:
class Solution {
    public boolean isValidBST(TreeNode root) {
        if (root == null) return true;
     
        if (root.left != null && root.left.val >= root.val) return false;
        if (root.right != null && root.right.val <= root.val) return false;
        if (!isValidBST(root.left, null, root.val) || !isValidBST(root.right, root.val, null)) return false;
        
        return true;
    }
    
    public boolean isValidBST(TreeNode root, Integer min, Integer max) {
        if (root == null) return true;
     
        if (root.left != null){
            if (root.left.val >= root.val || (min!=null && root.left.val <= min)) return false;
        }
        if (root.right != null){
            if (root.right.val <= root.val || (max!=null && root.right.val >= max)) return false;
        }
        if (!isValidBST(root.left, min, root.val) || !isValidBST(root.right, root.val, max)) return false;
        
        return true;
    }
}
