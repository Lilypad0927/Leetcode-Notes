Problem: https://leetcode.com/problems/container-with-most-water/

Thought: Traverse from the ends to the middle; Always choose the higher end; Keep track of the bigger area.

Java:
class Solution {
    public int maxArea(int[] height) {
        int start = 0;
        int end = height.length - 1;
        int result = 0;
        int temp = 0;

        while (start < end) {
            temp = Math.min(height[start], height[end]) * (end - start);
            if (height[start] < height[end]) {
                start++;
            }
            else {
                end--;
            }
            result = Math.max(result, temp);
        }

        return result;
    }
}

C++:
class Solution {
public:
    int maxArea(vector<int>& height) {
        int i = 0, j = height.size() - 1;
        int ans = 0;
        while (i < j) {
            int t = min(height[i], height[j]) * (j - i);
            ans = max(ans, t);
            if (height[i] < height[j]) {
                ++i;
            } else {
                --j;
            }
        }
        return ans;
    }
};

Python:
class Solution:
    def maxArea(self, height: List[int]) -> int:
        left = 0
        right = len(height) - 1
        maxArea = 0

        while left < right:
            currentArea = min(height[left], height[right]) * (right - left)
            maxArea = max(maxArea, currentArea)

            if height[left] < height[right]:
                left += 1
            else:
                right -= 1

        return maxArea
