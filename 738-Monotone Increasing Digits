https://leetcode.com/problems/monotone-increasing-digits/
Problem: An integer has monotone increasing digits if and only if each pair of adjacent digits x and y satisfy x <= y.
         Given an integer n, return the largest number that is less than or equal to n with monotone increasing digits.

Note: Learn how to convert char, int, string.
Thought: if not monotone increasing, go down 1 digit and change the tail to 999...

Python:
# In Python, strings are immutable! meaning you cannot replace parts of them
class Solution:
    def monotoneIncreasingDigits(self, n: int) -> int:
        if n < 10:
            return n
        n_str = str(n)
        marker = len(n_str)
        for i in range(len(n_str)-1, 0, -1):
            if n_str[i] < n_str[i-1]:
                n_str = n_str[:i-1] + str(int(n_str[i-1]) - 1) + n_str[i:]
                marker = i
        n_str = n_str[:marker]
        for i in range(marker, len(str(n))):
            n_str += '9'
        return int(n_str)

C++:
class Solution {
public:
    int monotoneIncreasingDigits(int n) {
        if (n<10) return n;
        string n_str = to_string(n);
        
        int marker = n_str.size();
        for(int i = n_str.size()-1; i > 0; i--) {
            if(n_str[i] < n_str[i-1]) {
                marker = i;
                n_str[i-1] = n_str[i-1]-1;
            }
        }
        
        for(int i = marker; i < n_str.size(); i++) n_str[i] = '9';
        
        return stoi(n_str);
    }
};

Java:
class Solution {
    public int monotoneIncreasingDigits(int n) {
        if (n<10) return n;
        String number = String.valueOf(n);
        int index = -1;
        int size = number.length();
        for (int i = 1; i<size; i++){
            if (number.charAt(i) < number.charAt(i-1)){
                index = i;
                while (index > 0 && number.charAt(index) <= number.charAt(index-1)) index--;
                break;
            }
        }
        if (index == -1) return n;
        return Integer.parseInt(number.substring(0, index) + 
                                String.valueOf(Character.getNumericValue(number.charAt(index))-1) + 
                                new String(new char[size-index-1]).replace("\0", "9"));
    }
}
