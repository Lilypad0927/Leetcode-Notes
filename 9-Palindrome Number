Problem: https://leetcode.com/problems/palindrome-number/
         Given an integer x, return true if x is palindrome integer.
         An integer is a palindrome when it reads the same backward as forward.

Thought: When the length is an odd number, we can get rid of the middle digit by revertedNumber/10
         For example when the input is 12321, at the end of the while loop we get x = 12, revertedNumber = 123,
         since the middle digit doesn't matter in palidrome(it will always equal to itself), we can simply get rid of it.

Java:
class Solution {
    public boolean isPalindrome(int x) {
        if(x < 0 || (x % 10 == 0 && x != 0)) {
            return false;
        }

        int revertedNumber = 0;
        while(x > revertedNumber) {
            revertedNumber = revertedNumber * 10 + x % 10;
            x /= 10;
        }
        
        return x == revertedNumber || x == revertedNumber/10;
    }
}

C++:
class Solution {
public:
    bool isPalindrome(int x) {
        if (x < 0) return false;
        else if (x < 10) return true;
        else if (x % 10 == 0) return false;
        else {
            int reverted_num = 0;
            while (x > reverted_num){
                reverted_num = reverted_num*10 + (x % 10);
                x /= 10;
            }
            return x == reverted_num || x == (reverted_num/10);
        }
    }
};

Python:
class Solution:
    def isPalindrome(self, x: int) -> bool:
        if x < 0:
            return False
        elif x < 10:
            return True
        elif x % 10 == 0:
            return False
        else:
            reverted_num = 0
            while x > reverted_num:
                reverted_num = reverted_num * 10 + x % 10
                x = x // 10
            return x == reverted_num or x == reverted_num // 10
