Question: https://leetcode.com/problems/remove-nth-node-from-end-of-list/
    Given the head of a linked list, remove the nth node from the end of the list and return its head.

C++:
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        ListNode *curr = head;
        ListNode *to_modify = head;
        int i = 0;
        while (curr->next != nullptr){
            if (i < n) {
                i++;
            }
            else {
                to_modify = to_modify->next;
            }
            curr = curr->next;
        }
        if (i != n || to_modify->next == nullptr){
            head = head->next;
            delete to_modify;
            return head;
        }
        ListNode *to_delete = to_modify->next;
        to_modify->next = to_modify->next->next;
        delete to_delete;
        return head;
    }
};

Python:
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def removeNthFromEnd(self, head, n):
        """
        :type head: Optional[ListNode]
        :type n: int
        :rtype: Optional[ListNode]
        """
        curr, to_modify = head, head
        for _ in range(n):
            curr = curr.next
        if curr is None:
            return head.next
        while curr.next is not None:
            to_modify = to_modify.next
            curr = curr.next
        to_modify.next = to_modify.next.next
        return head

Java:
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode cur = head, prev = head;
        while(n-- > 0) {
            cur = cur.next;
        }
        if (cur == null) 
            return head.next;
        while (cur.next != null) {
            cur = cur.next;
            prev = prev.next;
        }
        prev.next = prev.next.next;
        return head;
    }
}
