Question: https://leetcode.com/problems/min-cost-climbing-stairs/description/
          You are given an integer array cost where cost[i] is the cost of ith step on a staircase. 
          Once you pay the cost, you can either climb one or two steps.
          You can either start from the step with index 0, or the step with index 1.
          Return the minimum cost to reach the top of the floor.

Thought: Bottom-up. Keep 2 integers to record.

Python:
class Solution:
    def minCostClimbingStairs(self, cost: List[int]) -> int:
        first = cost[0]
        second = cost[1]
        for i in range(2, len(cost)):
            cur = cost[i] + min(first, second)
            first = second
            second = cur
        return min(first, second)

C++:
class Solution {
public:
    int minCostClimbingStairs(vector<int>& cost) {
        int first = cost[0];
        int second = cost[1];
        for (int i = 2; i < cost.size(); i++){
            int cur = cost[i] + min(first,second);
            first = second;
            second = cur;
        }
        return min(first, second);
    }
};

Java:
public int minCostClimbingStairs(int[] cost) {
    int first = cost[0];
    int second = cost[1];
    for (int i=2; i<cost.length; i++) {
        int curr = cost[i] + Math.min(first, second);
        first = second;
        second = curr;
    }
    return Math.min(first, second);
}
